{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "62847df6",
      "metadata": {
        "id": "62847df6"
      },
      "source": [
        "# Programming Assignment #5"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2cf26558",
      "metadata": {
        "id": "2cf26558"
      },
      "source": [
        "\n",
        "## Association rule mining\n",
        "\n",
        "The market basket transactions dataset (transactions_data.txt) contains a list of items purchased by customers in each transaction.\n",
        "\n",
        "1. Load the transaction dataset file.\n",
        "2. Use minimum support = 0.2 and use_colname=True in apriori method.\n",
        "3. Select metric as confidence in association rules and set the minimum threshold = 0.5.\n",
        "\n",
        "Example:\n",
        "If the minimum support is 0.4, the metric is confidence, and minimum threshold is 0.5 then some of the outputs are:\n",
        "- The least frequency of frequent 1-itemset is ['Queso'].\n",
        "- The support, confidence, and lift of rule ['Queso'] -> ['Tortilla chips'] are:\n",
        "  - Consequent support = 0.7\n",
        "  - Support = 0.4\n",
        "  - Confidence = 1.00\n",
        "  - Lift = 1.42\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e8704cba",
      "metadata": {
        "id": "e8704cba"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Import the packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from mlxtend.preprocessing import TransactionEncoder\n",
        "from mlxtend.frequent_patterns import apriori, association_rules\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a2c3ceee",
      "metadata": {
        "id": "a2c3ceee"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Load the transactions dataset\n",
        "def load_dataset(path_to_data):\n",
        "    transactions = []\n",
        "    with open(path_to_data, 'r') as fid:\n",
        "        for line in fid:\n",
        "            # Split items in each transaction by commas and strip any whitespace\n",
        "            transaction = [item.strip() for item in line.strip().split(',')]\n",
        "            transactions.append(transaction)\n",
        "    return transactions\n",
        "\n",
        "# Path to the dataset\n",
        "path_to_data = \"transactions_data.txt\"\n",
        "dataset = load_dataset(path_to_data)\n",
        "dataset\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a07570e2",
      "metadata": {
        "id": "a07570e2"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Transform the data to a format suitable for the apriori function\n",
        "te = TransactionEncoder()\n",
        "te_ary = te.fit(dataset).transform(dataset)\n",
        "df = pd.DataFrame(te_ary, columns=te.columns_)\n",
        "\n",
        "# Apply the apriori algorithm\n",
        "frequent_itemsets = apriori(df, min_support=0.2, use_colnames=True)\n",
        "print(\"Frequent Itemsets:\")\n",
        "print(frequent_itemsets)\n",
        "\n",
        "# Generate the association rules\n",
        "rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.5)\n",
        "print(\"\\nAssociation Rules:\")\n",
        "print(rules)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}